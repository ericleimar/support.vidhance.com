<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Androids on Vidhance Support</title>
    <link>http://support.vidhance.com/android/</link>
    <description>Recent content in Androids on Vidhance Support</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 11 Mar 2015 14:32:03 +0100</lastBuildDate>
    <atom:link href="http://support.vidhance.com/android/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Evaluate Vidhance Mobile</title>
      <link>http://support.vidhance.com/android/evaluate/</link>
      <pubDate>Wed, 11 Mar 2015 14:32:03 +0100</pubDate>
      
      <guid>http://support.vidhance.com/android/evaluate/</guid>
      <description>

&lt;h1 id=&#34;introduction:2098571bf32dbe26c65576ebc57af191&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;This section describes how to download and flash the files necessary to evaluate Vidhance Mobile on a Nexus 6 device with Android 5.1.&lt;/p&gt;

&lt;h1 id=&#34;prerequisites:2098571bf32dbe26c65576ebc57af191&#34;&gt;Prerequisites&lt;/h1&gt;

&lt;h2 id=&#34;pc:2098571bf32dbe26c65576ebc57af191&#34;&gt;PC&lt;/h2&gt;

&lt;p&gt;We recommend using a Ubuntu 14.04 LTS. You will need to install ADB and fastboot:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt-get install phablet-tools
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;downloading-files:2098571bf32dbe26c65576ebc57af191&#34;&gt;Downloading files&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Create a folder&lt;/li&gt;
&lt;li&gt;Download the &lt;a href=&#34;android/evaluate/download.sh&#34;&gt;download script&lt;/a&gt; and run it inside the folder&lt;/li&gt;
&lt;li&gt;Enter your key to start downloading the necessary files&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;phone:2098571bf32dbe26c65576ebc57af191&#34;&gt;Phone&lt;/h2&gt;

&lt;h3 id=&#34;enabling-usb-debugging:2098571bf32dbe26c65576ebc57af191&#34;&gt;Enabling USB debugging&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Go to the &lt;em&gt;Settings&lt;/em&gt; app on your device.&lt;/li&gt;
&lt;li&gt;Select &lt;em&gt;About phone&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Tap &lt;em&gt;Build number&lt;/em&gt; seven times to unlock developer options&lt;/li&gt;
&lt;li&gt;You should see a message that confirms you have enabled the developer options&lt;/li&gt;
&lt;li&gt;Go back to the Settings menu&lt;/li&gt;
&lt;li&gt;Select &lt;em&gt;Developer options&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Check the &lt;em&gt;USB debugging&lt;/em&gt; box&lt;/li&gt;
&lt;li&gt;Press OK when asked: &lt;em&gt;Allow USB debugging?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Connect the device to a USB port on your computer&lt;/li&gt;
&lt;li&gt;Press OK when asked: &lt;em&gt;Allow USB debugging?&lt;/em&gt; with the computer&amp;rsquo;s RSA key fingerprint displayed.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To verify, run the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;adb devices
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If the device is listed as &lt;em&gt;device&lt;/em&gt; you are all set. If it is listed as &lt;em&gt;unauthorized&lt;/em&gt;, restart the ADB server:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;adb kill-server
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;adb start-server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and you should be asked to allow USB debugging (see step 6).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;rooting:2098571bf32dbe26c65576ebc57af191&#34;&gt;Rooting&lt;/h1&gt;

&lt;p&gt;Skip this step if you already have a rooted version of Android 5.1 on the device and continue to &lt;strong&gt;Installing Vidhance&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;booting-device-into-bootloader:2098571bf32dbe26c65576ebc57af191&#34;&gt;Booting device into bootloader&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Use ADB to reboot the device into the bootloader:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;adb reboot-bootloader
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Make sure the device is unlocked by using the fastboot command and follow the instructions on the screen of the device:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;fastboot oem unlock
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;flash-rooted-boot-image:2098571bf32dbe26c65576ebc57af191&#34;&gt;Flash rooted boot image&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Run the script for flashing Android:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;. flash_android.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Wait for the phone to reboot.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id=&#34;installing-vidhance:2098571bf32dbe26c65576ebc57af191&#34;&gt;Installing Vidhance&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Run the script for flashing Vidhance:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;. flash_vidhance.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Wait for the phone to reboot.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;running:2098571bf32dbe26c65576ebc57af191&#34;&gt;Running&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Start the default camera application.&lt;/li&gt;
&lt;li&gt;Switch to video capture.&lt;/li&gt;
&lt;li&gt;You should see a viewfinder in the preview representing the area that will be captured in the video.&lt;/li&gt;
&lt;li&gt;Start recording.&lt;/li&gt;
&lt;li&gt;The resulting video should be stabilized and contain an Imint logotype and a trace showing the stabilization for the x and y axes.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>FAQ</title>
      <link>http://support.vidhance.com/android/faq/</link>
      <pubDate>Wed, 11 Mar 2015 14:32:03 +0100</pubDate>
      
      <guid>http://support.vidhance.com/android/faq/</guid>
      <description>

&lt;h2 id=&#34;does-vidhance-crop-the-captured-video:4a1318da06786ac52626178ca960109e&#34;&gt;Does Vidhance crop the captured video?&lt;/h2&gt;

&lt;p&gt;Yes, any video stabilization solution requires a smaller field of view in the resulting video compared to the original. In Vidhance however, the level of trimming can be dynamically set through the API. This enables functions like “Adaptive Zoom”, where the crop can be smoothly adjusted to fit the amplitude of unwanted motion. It also allows to create different video capture modes, such as “normal” and “sports mode”, where the latter will need a smaller field of view as the amplitude of shakes is expected to be higher.&lt;/p&gt;

&lt;h2 id=&#34;which-socs-are-supported:4a1318da06786ac52626178ca960109e&#34;&gt;Which SoCs are supported?&lt;/h2&gt;

&lt;p&gt;The quick integration method applied means that the software to a large extent is hardware agnostic. The first successful integrations have been done on various Qualcomm and Nvidia chipsets. After a first successful integration, further hardware specific optimizations and adjustments can be made to further improve performance and quality.&lt;/p&gt;

&lt;p&gt;Vidhance should work on most high-end SoCs such as the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Qualcomm Snapdragon 800 (Quad-core 2.3 GHz Krait 400, Adreno 330)&lt;/li&gt;
&lt;li&gt;Qualcomm Snapdragon 805 (Quad-core 2.7 GHz Krait 450, Adreno 420)&lt;/li&gt;
&lt;li&gt;Nvidia Tegra 3 (Quad-core 1.2 GHz Cortex-A9)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;what-video-resolutions-and-frame-rates-are-supported:4a1318da06786ac52626178ca960109e&#34;&gt;What video resolutions and frame rates are supported?&lt;/h2&gt;

&lt;p&gt;Vidhance is adjustable to any video resolution. Obviously, the larger the resolution, the better the image computational capacity of the hardware needs to be dimensioned. However, the processor load for the core motion analysis algorithms does not scale proportional to increased video resolution, so it is more a question on efficient image data transfers.&lt;/p&gt;

&lt;p&gt;Vidhance is also adjustable to any frame rate, but the higher the frame rate, the better hardware performance is needed. For framerates 120 fps and above, which is intended to be played back at standard frame rates (slow motion replay), the need for video stabilization is reduced, as the slowdown in itself mitigate the instability issues.&lt;/p&gt;

&lt;h2 id=&#34;latency:4a1318da06786ac52626178ca960109e&#34;&gt;Latency?&lt;/h2&gt;

&lt;p&gt;Vidhance is uniquely quick, and can perform with less than one frame delay (meaning no look-ahead buffer at all). For consumer devices however, a latency of 2-4 frames is typically used, as this enables better processor load balancing, and thus saves battery time. It is still fast enough to be viable to use the enhanced video in screen preview, or for live streaming purposes.&lt;/p&gt;

&lt;p&gt;Vidhance is also being extended with a mode using a lookahead buffer. This will enable further improvements in video stabilization quality, and supports features such as “preemptive stabilization”, where a future known motion can be compensated by letting a smooth motion through earlier.&lt;/p&gt;

&lt;h2 id=&#34;performance-battery:4a1318da06786ac52626178ca960109e&#34;&gt;Performance/Battery?&lt;/h2&gt;

&lt;p&gt;The quick integration method typically gives a penalty of around 30% added power consumption during recording. The majority of processor time is however spent copying and moving image data, and the core algorithms build up only a fraction of the processing cycle. In a deeper integration, where hardware specific tuning can be done (e.g. specific memory access primitives), the design target is to reach 10% or below.&lt;/p&gt;

&lt;h2 id=&#34;sensors-needed:4a1318da06786ac52626178ca960109e&#34;&gt;Sensors needed?&lt;/h2&gt;

&lt;p&gt;Vidhance does not need any hardware sensors, and can perform stabilization with great results using only video data (e.g. using the camera as the only sensor), using an in-house algorithm based on optical flow analysis. However, if rotation sensor data is available, this can easily be enabled as well to increase both performance and quality.&lt;/p&gt;

&lt;h2 id=&#34;patents:4a1318da06786ac52626178ca960109e&#34;&gt;Patents?&lt;/h2&gt;

&lt;p&gt;Vidhance core algorithms in motion estimation and stabilization are protected under US Patents. This can be valuable to mitigate risk of infringement claims from competitors, aiming to block or delay entrance into other markets.&lt;/p&gt;

&lt;h2 id=&#34;competition:4a1318da06786ac52626178ca960109e&#34;&gt;Competition?&lt;/h2&gt;

&lt;p&gt;Imint cannot get access to competitor’s solutions to perform own, detailed tests. Comparing results with leading phones for photo and video, such as the Apple iPhone6 and Sony Xperia Z3, Imint can demonstrate that Vidhance adds substantial quality gains in video stabilization. As for independent companies providing similar solutions, in Imint’s view, these are they key differentiators for Imint’s solution:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Able to execute with minimal latency (no look-ahead buffer needed)&lt;/li&gt;
&lt;li&gt;Does not depend on (but can benefit from) additional sensor data&lt;/li&gt;
&lt;li&gt;Does not only dampen motion, but separates intentional from unintentional motions, and cancelling out the latter&lt;/li&gt;
&lt;li&gt;Smooth pass-through of motions to emulate rigs and tripods&lt;/li&gt;
&lt;li&gt;Open API with a rich level of configuration available for the integrator.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started with Vidhance SDK for Android</title>
      <link>http://support.vidhance.com/android/gettingstarted/</link>
      <pubDate>Wed, 11 Mar 2015 14:32:03 +0100</pubDate>
      
      <guid>http://support.vidhance.com/android/gettingstarted/</guid>
      <description>

&lt;h1 id=&#34;introduction:4d8715ce994286818a53a9e77d960afc&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;This section will describe how to integrate Vidhance by wrapping the camera driver on Android devices. This can be achieved by replacing the camera HAL implementation with a wrapper which internally will link to the original implementation. This enables the wrapper to monitor the requests sent to the camera and modify the input and output data.&lt;/p&gt;

&lt;h1 id=&#34;prerequisites:4d8715ce994286818a53a9e77d960afc&#34;&gt;Prerequisites&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;We recommend using a computer with Ubuntu 14.04&lt;/li&gt;
&lt;li&gt;Android device with root access&lt;/li&gt;
&lt;li&gt;Camera HAL version 1.0, 3.0 or 3.2&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;setting-up-device:4d8715ce994286818a53a9e77d960afc&#34;&gt;Setting up device&lt;/h1&gt;

&lt;h2 id=&#34;enabling-usb-debugging:4d8715ce994286818a53a9e77d960afc&#34;&gt;Enabling USB debugging&lt;/h2&gt;

&lt;p&gt;You need to have USB debugging enabled on your device:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Connect the device to a USB port on your computer&lt;/li&gt;
&lt;li&gt;Go to the &lt;em&gt;Settings&lt;/em&gt; app on your device.&lt;/li&gt;
&lt;li&gt;Select &lt;em&gt;About phone&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Tap &lt;em&gt;Build number&lt;/em&gt; seven times to unlock developer options&lt;/li&gt;
&lt;li&gt;You should see a message that confirms you have enabled the developer options&lt;/li&gt;
&lt;li&gt;Go back to the Settings menu&lt;/li&gt;
&lt;li&gt;Select &lt;em&gt;Developer options&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Check the &lt;em&gt;USB debugging&lt;/em&gt; box&lt;/li&gt;
&lt;li&gt;Press OK when asked: &lt;em&gt;Allow USB debugging?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Press OK when asked: &lt;em&gt;Allow USB debugging?&lt;/em&gt; with the computer&amp;rsquo;s RSA key fingerprint displayed.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To verify, run the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;adb devices
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If the device is listed as &lt;em&gt;device&lt;/em&gt; you are all set. If it is listed as &lt;em&gt;unauthorized&lt;/em&gt;, restart the ADB server:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;adb kill-server
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;adb start-server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and you should be asked to allow USB debugging (see step 10).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;setting-up-environment:4d8715ce994286818a53a9e77d960afc&#34;&gt;Setting up environment&lt;/h1&gt;

&lt;h2 id=&#34;installing-adb:4d8715ce994286818a53a9e77d960afc&#34;&gt;Installing ADB&lt;/h2&gt;

&lt;p&gt;You will need ADB (Android Debug Bridge) to write files to the device:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt-get install phablet-tools
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;installing-android-ndk:4d8715ce994286818a53a9e77d960afc&#34;&gt;Installing Android-NDK&lt;/h2&gt;

&lt;p&gt;You will need ndk-build located in the Android-NDK to build the sources for your device.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download the installer &lt;a href=&#34;https://developer.android.com/tools/sdk/ndk/index.html&#34;&gt;here&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open a terminal and move to a suitable directory (e.g. home)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd ~
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Set execution rights on the binary&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;chmod a+x android-ndk-r10d-linux-x86_64.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the binary&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./android-ndk-r10d-linux-x86_64.bin
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;downloading-wrapper-sources:4d8715ce994286818a53a9e77d960afc&#34;&gt;Downloading wrapper sources&lt;/h2&gt;

&lt;p&gt;To quickly get started with Vidhance SDK we provide a public repository containing code to wrap the camera HAL and examples of how to integrate Vidhance SDK for Nexus devices. This code can easily be modified to run on your device. The repository can be cloned from github:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/vidhance/android-camera-wrapper
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;downloading-vidhance-library:4d8715ce994286818a53a9e77d960afc&#34;&gt;Downloading Vidhance library&lt;/h2&gt;

&lt;p&gt;Inside the nexus6 example folder you will find &lt;em&gt;download_vidhance.sh&lt;/em&gt;. This script can be used to download the correct version of Vidhance for your device. You will need a key to be able to begin the download. Run the script and follow the instructions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;chmod a+x download_vidhance.sh
./download_vidhance.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;configuring-for-your-device:4d8715ce994286818a53a9e77d960afc&#34;&gt;Configuring for your device&lt;/h1&gt;

&lt;p&gt;We recommend that you modify the example implementation for Nexus 6 to create a compatible version for your device.&lt;/p&gt;

&lt;h2 id=&#34;android-dependencies:4d8715ce994286818a53a9e77d960afc&#34;&gt;Android dependencies&lt;/h2&gt;

&lt;p&gt;The camera wrapper depends on libraries found in the Android source tree. We have provided the needed headers and libraries for Nexus 6 which should be compatible with any 32-bit ARM-based device running Android 5.0.1. The headers can be found in the &lt;em&gt;include&lt;/em&gt; folder and the libraries in the &lt;em&gt;libs&lt;/em&gt; folder. If your device uses a different architecture or Android version you may need to replace these libraries with ones compatible with your device. Contact us if you need help with this matter.&lt;/p&gt;

&lt;h2 id=&#34;determining-hal-version:4d8715ce994286818a53a9e77d960afc&#34;&gt;Determining HAL version&lt;/h2&gt;

&lt;p&gt;You need to know which HAL version your original library has implemented to choose the correct wrapper. Query the device with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;adb shell dumpsys | grep &amp;quot;Device version:&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result should be something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Device version: 0x302
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where the most significant digit is the major version number and the two least significant digits are the minor version number. In the above example the original HAL is therefore of version 3.2. Note that Vidhance SDK currently only supports HAL version 3.0 and 3.2 but support for older versions will be available soon.&lt;/p&gt;

&lt;h2 id=&#34;configuring-android-makefiles:4d8715ce994286818a53a9e77d960afc&#34;&gt;Configuring Android makefiles&lt;/h2&gt;

&lt;h3 id=&#34;android-mk:4d8715ce994286818a53a9e77d960afc&#34;&gt;Android.mk&lt;/h3&gt;

&lt;p&gt;Inside the Nexus 6 folder you can find Android.mk which is used as a makefile when building with ndk-build. We provide wrapper implementations for a number of camera HAL versions. You need to edit the makefile to use the sources for the HAL version you intend to use with your device. In the example Android.mk you will see the sources from HAL 3 included in the makefile. Simply change the folder to the correct version.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LOCAL_SRC_FILES := \
    ../HAL/CameraHAL.cpp \
    ../HAL/CameraWrapper.cpp \
    ../HAL/CameraWrapperFactory.cpp \
    ../HAL/HAL3/CameraHALWrapper.cpp \
    ../HAL/HAL3/VideoProcessor.cpp \
    ../vidhance/rotation_sensor/SensorReader.cpp \
    VidhanceProcessor.cpp \
LOCAL_CFLAGS += -DHAVE_PTHREADS -DHAL_3_2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;application-mk:4d8715ce994286818a53a9e77d960afc&#34;&gt;Application.mk&lt;/h3&gt;

&lt;p&gt;In this file you can specify which Android API level you are building for. A complete list can be found &lt;a href=&#34;https://source.android.com/source/build-numbers.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;changes-in-source-code:4d8715ce994286818a53a9e77d960afc&#34;&gt;Changes in source code&lt;/h2&gt;

&lt;p&gt;The VidhanceProcessor implementation in the nexus6 folder is an example of how to use the camera wrapper implementation in combination with the Vidhance library. You need some minor modifications before you start building.&lt;/p&gt;

&lt;h3 id=&#34;include-correct-videoprocessor-header:4d8715ce994286818a53a9e77d960afc&#34;&gt;Include correct VideoProcessor header&lt;/h3&gt;

&lt;p&gt;Make sure the correct VideoProcessor header for your HAL version is included in VidhanceProcessor.h.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/* VidhanceProcessor.h */
#include &amp;quot;../HAL/HAL3/VideoProcessor.h&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;configure-graphicbuffer:4d8715ce994286818a53a9e77d960afc&#34;&gt;Configure GraphicBuffer&lt;/h3&gt;

&lt;p&gt;Vidhance uses Android&amp;rsquo;s &lt;em&gt;GraphicBuffer&lt;/em&gt; class to allocate buffer memory. To maximize performance, Vidhance needs to be provided with a list of widths that are aligned in memory, i.e. no padding is used. This is device-specific and needs to be explicitly provided to Vidhance. The list should contain aligned widths in bytes for GraphicBuffers allocated with format &lt;em&gt;HAL_PIXEL_FORMAT_RGBA_8888&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&#34;option-1:4d8715ce994286818a53a9e77d960afc&#34;&gt;Option 1&lt;/h4&gt;

&lt;p&gt;You can use the function &lt;em&gt;getAlignedWidth()&lt;/em&gt; located in &lt;em&gt;vidhance/graphicbuffer/GraphicBufferWrapper.h&lt;/em&gt; to check the values for your device:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/* VidhanceProcessor.cpp */
#include &amp;quot;../vidhance/graphicbuffer/GraphicBufferWrapper.h&amp;quot;

vidhance_context* context = NULL;
VidhanceProcessor::VidhanceProcessor(const char* cameraId) :
		VideoProcessor(cameraId) {
	if (context == NULL) {
		aligned_width alignedWidth = getAlignedWidth();
		kean_draw_gpu_android_graphicBuffer_configureAlignedWidth(&amp;amp;alignedWidth.width[0], alignedWidth.count);
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;option-2-recommended:4d8715ce994286818a53a9e77d960afc&#34;&gt;Option 2 (Recommended)&lt;/h4&gt;

&lt;p&gt;Option 1 should only be used to get started if you do not know the values for your device since it will slow down the initialization. The function will return the values and print the aligned widths to Logcat under the log tag &lt;em&gt;GraphicBufferWrapper&lt;/em&gt; (See &lt;a href=&#34;./android/gettingstarted#UsingDDMS&#34;&gt;Using DDMS&lt;/a&gt; for instructions). Use this output to create a predefined array with values. Example for Nexus 6:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/* VidhanceProcessor.cpp */

/* Predefined aligned width in bytes for RGBA8888 GraphicBuffers on Nexus 6 */
#define ALIGNED_WIDTH_COUNT 10
const int alignedWidth[ALIGNED_WIDTH_COUNT] =
{ 128, 256, 384, 512, 1024, 1536, 2560, 3072, 3584, 4608 };

vidhance_context* context = NULL;
VidhanceProcessor::VidhanceProcessor(const char* cameraId) :
		VideoProcessor(cameraId) {
	if (context == NULL) {
		kean_draw_gpu_android_graphicBuffer_configureAlignedWidth(&amp;amp;alignedWidth[0], ALIGNED_WIDTH_COUNT);
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&#34;Building&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;building:4d8715ce994286818a53a9e77d960afc&#34;&gt;Building&lt;/h1&gt;

&lt;p&gt;The &lt;em&gt;make.sh&lt;/em&gt; script is an example of how to use ndk-build to build the sources. You are of course free to use your toolchain of choice. The build should generate &lt;em&gt;libcamera_wrapper.so&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;PreparingPhoneForWrapper&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;preparing-phone-for-wrapper:4d8715ce994286818a53a9e77d960afc&#34;&gt;Preparing phone for wrapper&lt;/h1&gt;

&lt;p&gt;Before we can push the wrapper to the device we need to know the filename Android expects when loading the camera HAL. For example, for Nexus 5 it is &lt;em&gt;camera.hammerhead.so&lt;/em&gt; and for Nexus 6
&lt;em&gt;camera.msm8084.so&lt;/em&gt;. What we want to do is to rename the wrapper library to the expected filename and rename the actual HAL implementation to camera_backend.so so it can be loaded by the wrapper.&lt;/p&gt;

&lt;p&gt;It is recommended to create a backup of the original HAL implementation if you somehow manage to delete it by mistake. You can pull the library from the device with adb:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adb pull /system/lib/hw/camera.msm8084.so &amp;lt;path on your computer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First take a look at the setup_device.sh script which demonstrates how to create the backend library from the default HAL implementation. Make sure you set the &lt;em&gt;CAMERA_HAL&lt;/em&gt; variable to the name of your original library. The script also pushes the Vidhance library to the phone so make sure you have downloaded it and specified the correct path to it in the script. Once the script has completed you don&amp;rsquo;t have to run it unless you reinstall Android on your phone or simply want to push a newer version of the Vidhance library.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#setup_device.sh

#!/bin/bash
CAMERA_HAL=camera.msm8084.so
VIDHANCE_PATH=./libs/libvidhance_android32.so
../scripts/setup_device.sh $CAMERA_HAL $VIDHANCE_PATH

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&#34;PushingToPhone&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;pushing-to-phone:4d8715ce994286818a53a9e77d960afc&#34;&gt;Pushing to phone&lt;/h1&gt;

&lt;p&gt;Every time you have rebuilt the wrapper library you can use the push.sh script to overwrite it on the device. Make sure you set the &lt;em&gt;CAMERA_HAL&lt;/em&gt; variable to the name of your original library and the correct path to your wrapper library.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#push.sh

#!/bin/bash
CAMERA_HAL=camera.msm8084.so
WRAPPER_PATH=./libs/armeabi-v7a/libcamera_wrapper.so
../scripts/push.sh $CAMERA_HAL $WRAPPER_PATH

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;using-the-vidhance-api:4d8715ce994286818a53a9e77d960afc&#34;&gt;Using the Vidhance API&lt;/h1&gt;

&lt;p&gt;Examine the &lt;em&gt;VidhanceProcessor&lt;/em&gt; implementation in the nexus6 folder and use it as a tutorial of how to integrate Vidhance for Android. Here is a more detailed description of the code:&lt;/p&gt;

&lt;h2 id=&#34;initializing:4d8715ce994286818a53a9e77d960afc&#34;&gt;Initializing&lt;/h2&gt;

&lt;p&gt;Before you can use the Vidhance API you need to initialize it by calling the load function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vidhance_load();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;register-callbacks:4d8715ce994286818a53a9e77d960afc&#34;&gt;Register callbacks&lt;/h2&gt;

&lt;h3 id=&#34;graphicbuffer:4d8715ce994286818a53a9e77d960afc&#34;&gt;GraphicBuffer&lt;/h3&gt;

&lt;p&gt;Vidhance depends on a number of callbacks to interact with Android&amp;rsquo;s GraphicBuffer. These callbacks are located in the vidhance folder and should &lt;strong&gt;NOT&lt;/strong&gt; be modified. Simply include the header and supply Vidhance with the function pointers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;quot;../vidhance/graphicbuffer/GraphicBufferWrapper.h&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;kean_draw_gpu_android_graphicBuffer_registerCallbacks(
  allocateGraphicBuffer,
  createGraphicBuffer,
  freeGraphicBuffer,
  lockGraphicBuffer,
  unlockGraphicBuffer);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&#34;DebugPrint&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;debug-print:4d8715ce994286818a53a9e77d960afc&#34;&gt;Debug print&lt;/h3&gt;

&lt;p&gt;If you want debug output from Vidhance you can register a print callback. A default function that prints to logcat is located in the vidhance folder but you are free to use your own.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;quot;../vidhance/debug/Debug.h&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;kean_base_debug_registerCallback(debugPrint);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;creating-vidhance-context:4d8715ce994286818a53a9e77d960afc&#34;&gt;Creating Vidhance context&lt;/h2&gt;

&lt;p&gt;To create a context we first need to create settings for the context.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vidhance_settings* settings = vidhance_settings_new();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If your device can provide rotational sensor data you should register the getRotationVector callback in the settings. Include the header in the vidhance folder and register the function pointer.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;quot;../vidhance/rotation_sensor/RotationSensor.h&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;vidhance_settings_registerCallback(settings, getRotationVector);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now create a vidhance context using the settings. It is recommended to store the context statically to prevent the need to construct it every time the camera starts.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vidhance_context* context = NULL;
VidhanceProcessor::VidhanceProcessor(const char* cameraId) :
		VideoProcessor(cameraId) {
...
if (context == NULL)
  context = vidhance_context_new(settings);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;processing-frames:4d8715ce994286818a53a9e77d960afc&#34;&gt;Processing frames&lt;/h2&gt;

&lt;p&gt;The VidhanceProcessor contains one callback for video capture buffers and one for preview buffers. To feed a frame to the Vidhance context, an image object needs to be created from some of the properties of the GraphicBuffer parameter. The object needs to know how the data in the buffer is aligned in memory. For example, for Nexus 6 the width of the frame will be padded to 64 byte alignment and the height to 32 byte alignment.&lt;/p&gt;

&lt;p&gt;The image structure can then be passed to one of the process functions. The first argument will be used as input buffer and the second argument will be used as output buffer where the result is written.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void VidhanceProcessor::processVideoCapture(sp&amp;lt;GraphicBuffer&amp;gt; input, sp&amp;lt;GraphicBuffer&amp;gt; output) {
	int horizontalStride = ALIGN(input-&amp;gt;width, 64);
	int verticalStride = ALIGN(input-&amp;gt;height, 32);
	int uvOffset = horizontalStride * verticalStride;
	kean_draw_gpu_android_graphicBufferYuv420Semiplanar* inputImage = kean_draw_gpu_android_graphicBufferYuv420Semiplanar_new((void*)input.get(),
			(void*)input-&amp;gt;getNativeBuffer(), (void*) input-&amp;gt;handle,
			kean_math_intSize2D_new(input-&amp;gt;width, input-&amp;gt;height), horizontalStride, input-&amp;gt;format, uvOffset);
	kean_draw_gpu_android_graphicBufferYuv420Semiplanar* outputImage = kean_draw_gpu_android_graphicBufferYuv420Semiplanar_new((void*)output.get(),
			(void*)output-&amp;gt;getNativeBuffer(), (void*) output-&amp;gt;handle,
			kean_math_intSize2D_new(output-&amp;gt;width, output-&amp;gt;height), horizontalStride, output-&amp;gt;format, uvOffset);
	vidhance_context_process(context, (kean_draw_image*) inputImage, (kean_draw_image*) outputImage);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configuring-settings:4d8715ce994286818a53a9e77d960afc&#34;&gt;Configuring settings&lt;/h2&gt;

&lt;p&gt;It is recommended to use the default settings until you have successfully built and pushed to the device. The Vidhance API enables you to configure the settings of the different modules to optimize quality and performance for your device. Take a look in &lt;em&gt;vidhance.h&lt;/em&gt; to see the available settings. As an example we will look at the motion settings:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/* Motion Settings */
vidhance_motion_settings* vidhance_settings_getMotion(vidhance_settings* settings);
void vidhance_motion_settings_setComplexity(vidhance_motion_settings* settings, int complexity);
int vidhance_motion_settings_getComplexity(vidhance_motion_settings* settings);
void vidhance_motion_settings_setMode(vidhance_motion_settings* settings, vidhance_motion_mode mode);
vidhance_motion_mode vidhance_motion_settings_getMode(vidhance_motion_settings* settings);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First we need a reference to the motion settings from our base settings:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vidhance_settings* settings = vidhance_settings_new();
vidhance_motion_settings* motionSettings = vidhance_settings_getMotion(settings);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we can alter a setting for this settings object:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vidhance_motion_settings_setComplexity(motionSettings, 3);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally we create the Vidhance context with the base settings object:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;context = vidhance_context_new(settings);
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;running:4d8715ce994286818a53a9e77d960afc&#34;&gt;Running&lt;/h1&gt;

&lt;h2 id=&#34;instructions:4d8715ce994286818a53a9e77d960afc&#34;&gt;Instructions&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Make sure you have successfully executed the &lt;em&gt;setup_device.sh&lt;/em&gt; script so the backend library and the Vidhance library exist on the device. (See &lt;a href=&#34;./android/gettingstarted#PreparingPhoneForWrapper&#34;&gt;Preparing phone for wrapper&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Build your implementation. (See &lt;a href=&#34;./android/gettingstarted#Building&#34;&gt;Building&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Push the wrapper to the device. (See &lt;a href=&#34;./android/gettingstarted#PushingToPhone&#34;&gt;Pushing to phone&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;When the device has rebooted you can use any camera app on the device to view your results.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;what-to-expect:4d8715ce994286818a53a9e77d960afc&#34;&gt;What to expect&lt;/h2&gt;

&lt;p&gt;If you have successfully built and pushed the correct files to your device you should be able to notice modifications in both the preview and captured video. If you used the default settings when creating the Vidhance context you can expect to see the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The preview should have a clearly visible viewfinder&lt;/li&gt;
&lt;li&gt;The captured video should be stabilized with a cleary visible motion trace in the lower right corner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If your result is not as expected you can proceed to the next chapter or contact our support via the chat widget on this page.&lt;/p&gt;

&lt;h1 id=&#34;troubleshooting:4d8715ce994286818a53a9e77d960afc&#34;&gt;Troubleshooting&lt;/h1&gt;

&lt;p&gt;It is recommended to use the debug version of the Vidhance library while in development. Version can be selected when running the &lt;em&gt;download_vidhance.sh&lt;/em&gt; script. The debug version includes useful print output which can be captured by configuring the debugPrint callback to a function of your choice (see &lt;a href=&#34;./android/gettingstarted#DebugPrint&#34;&gt;Debug print&lt;/a&gt;).
&lt;a name=&#34;UsingDDMS&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;using-ddms:4d8715ce994286818a53a9e77d960afc&#34;&gt;Using DDMS&lt;/h2&gt;

&lt;p&gt;The default callback for output is located in &lt;em&gt;vidhance/debug/Debug.h&lt;/em&gt; and will print the output to Android&amp;rsquo;s logging system Logcat. This output can be captured by using DDMS (Dalvik Debug Monitor Server) which is included in the Android-SDK. Follow these steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download Android-SDK &lt;a href=&#34;http://developer.android.com/sdk/index.html&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Run &lt;em&gt;ddms&lt;/em&gt; located in &lt;em&gt;android-sdks/tools&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Make sure your device is connected by USB and with USB debugging enabled. You should see your device listed in the DDMS window.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a new filter with these settings:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Filter Name:&lt;/em&gt; Vidhance&lt;/li&gt;
&lt;li&gt;&lt;em&gt;by Log Tag:&lt;/em&gt; Vidhance&lt;/li&gt;
&lt;li&gt;&lt;em&gt;by Log Level:&lt;/em&gt; verbose&lt;/li&gt;
&lt;li&gt;Leave the rest blank.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You should now get output to the filter from the Vidhance library when your device is capturing video.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you have problems with crashes it can be helpful to get the backtrace from the device. Create another filter with these settings:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Filter Name:&lt;/em&gt; Debug&lt;/li&gt;
&lt;li&gt;&lt;em&gt;by Log Tag:&lt;/em&gt; DEBUG&lt;/li&gt;
&lt;li&gt;&lt;em&gt;by Log Level:&lt;/em&gt; verbose&lt;/li&gt;
&lt;li&gt;Leave the rest blank.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When the device crashes you can check the backtrace in the debug filter for useful information.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Requirement Specification Template</title>
      <link>http://support.vidhance.com/android/validate/requirements/</link>
      <pubDate>Wed, 11 Mar 2015 14:32:03 +0100</pubDate>
      
      <guid>http://support.vidhance.com/android/validate/requirements/</guid>
      <description>

&lt;hr /&gt;

&lt;h1 id=&#34;1-general:a05dcee144da6675ae9d2fe98e94d8dd&#34;&gt;1 General&lt;/h1&gt;

&lt;h2 id=&#34;1-1-identification:a05dcee144da6675ae9d2fe98e94d8dd&#34;&gt;1.1 Identification&lt;/h2&gt;

&lt;p&gt;Vidhance Mobile is a unique real-time, purpose-built all-software video stabilization solution for mobile devices. The solution complements existing stabilization technologies, thereby augmenting camera capabilities and removes unwanted wobbling and swaying that occurs in most videos shot on a handheld device. Vidhance is a 3rd generation solution needed to propel widespread video clip sharing to the levels where still photo sharing is today.&lt;/p&gt;

&lt;p&gt;This document acts as a template for how a requirement specification can be structured for Vidhance Mobile. A complete specification is produced in collaboration with the customer.&lt;/p&gt;

&lt;h2 id=&#34;1-2-definitions:a05dcee144da6675ae9d2fe98e94d8dd&#34;&gt;1.2 Definitions&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;frame rate&lt;/strong&gt; The rate at which frames are recorded and/or processed. &lt;br&gt;
&lt;strong&gt;fps&lt;/strong&gt; Frames Per Second - The number of frames for each second of video. &lt;br&gt;
&lt;strong&gt;real-time&lt;/strong&gt; The ability of a system to process data in the same rate as it is gathered. &lt;br&gt;
&lt;strong&gt;720p&lt;/strong&gt; A resolution of 1280 x 720 pixels. &lt;br&gt;
&lt;strong&gt;1080p&lt;/strong&gt; A resolution of 1920 x 1080 pixels. &lt;br&gt;
&lt;strong&gt;2160p&lt;/strong&gt; A resolution of 4096 x 2160 pixels. &lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;1-3-revision-history:a05dcee144da6675ae9d2fe98e94d8dd&#34;&gt;1.3 Revision History&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;revision 1&lt;/em&gt; Emil Westergren 2015-05-26&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;2-system-overview:a05dcee144da6675ae9d2fe98e94d8dd&#34;&gt;2 System Overview&lt;/h1&gt;

&lt;h2 id=&#34;2-1-problem-description:a05dcee144da6675ae9d2fe98e94d8dd&#34;&gt;2.1 Problem Description&lt;/h2&gt;

&lt;p&gt;Recording video with smartphone devices is becoming increasingly more popular in today&amp;rsquo;s market. Practically all smartphones on the market have at least one camera sensor and the ability to capture video. A major problem with capturing quality video on a smartphone is the difficulty of keeping the device steady enough for the video to be stable and free from unintended motion from the photographer. This results in video with poor quality which makes it unpleasant to the eye.&lt;/p&gt;

&lt;h2 id=&#34;2-2-system-context:a05dcee144da6675ae9d2fe98e94d8dd&#34;&gt;2.2 System Context&lt;/h2&gt;

&lt;p&gt;Video recording with a smartphone is usually spontaneously captured, with the photographer controlling the camera by hand and perhaps also moving around while recording.&lt;/p&gt;

&lt;h2 id=&#34;2-3-system-usage:a05dcee144da6675ae9d2fe98e94d8dd&#34;&gt;2.3 System Usage&lt;/h2&gt;

&lt;p&gt;Vidhance is used to stabilize the video in real-time during the recording, resulting in a stabilized, high quality video without the need of post-processing.&lt;/p&gt;

&lt;h2 id=&#34;2-4-platform-prerequisites:a05dcee144da6675ae9d2fe98e94d8dd&#34;&gt;2.4 Platform Prerequisites&lt;/h2&gt;

&lt;h3 id=&#34;2-4-1-hardware:a05dcee144da6675ae9d2fe98e94d8dd&#34;&gt;2.4.1 Hardware&lt;/h3&gt;

&lt;p&gt;&amp;mdash;Insert hardware specifications for target device&amp;mdash;&lt;/p&gt;

&lt;h3 id=&#34;2-4-2-operating-system-and-library-dependencies:a05dcee144da6675ae9d2fe98e94d8dd&#34;&gt;2.4.2 Operating System and Library Dependencies&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Android 5.0&lt;/li&gt;
&lt;li&gt;OpenGL ES 3&lt;/li&gt;
&lt;li&gt;EGLImage extension&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-5-recording-prerequisites:a05dcee144da6675ae9d2fe98e94d8dd&#34;&gt;2.5 Recording Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The user moves with a maximum speed of 1 m/s&lt;/li&gt;
&lt;li&gt;The camera is held as steady as possible, using both hands with a firm grip on each side of the camera. The elbows should stay close to the body. Movements when holding the camera should be as slow and gentle as possible.&lt;/li&gt;
&lt;li&gt;The scene has sufficient light from the sun or other light sources&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;3-technical-requirements:a05dcee144da6675ae9d2fe98e94d8dd&#34;&gt;3 Technical requirements&lt;/h1&gt;

&lt;h2 id=&#34;3-1-general-requirements:a05dcee144da6675ae9d2fe98e94d8dd&#34;&gt;3.1 General Requirements&lt;/h2&gt;

&lt;h3 id=&#34;3-1-1-performance:a05dcee144da6675ae9d2fe98e94d8dd&#34;&gt;3.1.1 Performance&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;prf01&lt;/strong&gt; The recording runs continuously for 30 minutes or until the maximum file size is reached. &lt;br&gt;
&lt;strong&gt;prf02&lt;/strong&gt; Less than 3% frames dropped when recording 2160p video with a frame rate of 30 fps. &lt;br&gt;
&lt;strong&gt;prf03&lt;/strong&gt; Less than 2% frames dropped when recording 1080p video with a frame rate of 30 fps. &lt;br&gt;
&lt;strong&gt;prf04&lt;/strong&gt; Less than 1% frames dropped when recording 720p video with a frame rate of 30 fps. &lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-1-2-power-usage:a05dcee144da6675ae9d2fe98e94d8dd&#34;&gt;3.1.2 Power usage&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;pwu01&lt;/strong&gt; Having the stabilization enabled increases the power usage with a maximum of 30% during recording.&lt;/p&gt;

&lt;h2 id=&#34;3-2-scenario-requirements:a05dcee144da6675ae9d2fe98e94d8dd&#34;&gt;3.2 Scenario Requirements&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;sce01&lt;/strong&gt; The product shall perform better for at least 4 out of 5 of the following scenarios compared to with the product disabled. &lt;br&gt;
&lt;strong&gt;sce02&lt;/strong&gt; Walking forward in lit indoor scene. &lt;br&gt;
&lt;strong&gt;sce03&lt;/strong&gt; Sideways recording of moving person in sunlight. &lt;br&gt;
&lt;strong&gt;sce04&lt;/strong&gt; Rotation around moving object in cloudy outdoor scene. &lt;br&gt;
&lt;strong&gt;sce05&lt;/strong&gt; Rotation around user in lit indoor scene. &lt;br&gt;
&lt;strong&gt;sce06&lt;/strong&gt; Transition to/from shade in sunny outdoor scene. &lt;br&gt;
&lt;strong&gt;sce07&lt;/strong&gt; Zoomed capture of distant target in sunny outdoor scene. &lt;br&gt;&lt;/p&gt;

&lt;!-- **sce02** The product shall perform equal or better for at least 80% of the following scenarios compared to the solutions on Apple iPhone 6 and Sony Xperia Z3.
### 3.2.1 Light Conditions
**lit01** A lit indoor scene. &lt;br&gt;
**lit02** A sunny outdoor scene. &lt;br&gt;
**lit03** A cloudy outdoor scene. &lt;br&gt;
**lit04** Transitions between shade and sunlight. &lt;br&gt;

### 3.2.2 User Movement
**umv01** *Stationary* - The user remains stationary during the recording. &lt;br&gt;
**umv02** *Moving forward/backward* - The user walks forward/backward at a maximum speed of 1 m/s. &lt;br&gt;
**umv03** *Moving sideways* - As in **umv02** but instead recording to the right or left side. &lt;br&gt;
**umv04** *Rotation around object* - The user rotates around the object in focus. &lt;br&gt;
**umv05** *Rotation around user* - The user rotates around himself/herself. &lt;br&gt;

### 3.2.3 Scene Movement
**omv01** *Static* - No moving objects in the scene. &lt;br&gt;
**omv02** *Dynamic* - A maximum of five moving objects in the scene. &lt;br&gt; --&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>Validate</title>
      <link>http://support.vidhance.com/android/validate/</link>
      <pubDate>Wed, 11 Mar 2015 14:32:03 +0100</pubDate>
      
      <guid>http://support.vidhance.com/android/validate/</guid>
      <description>&lt;p&gt;Templates for requirement and test specifications for Vidhance Mobile Stabilization.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;./android/validate/requirements/index.html&#34;&gt;Requirement Specification Template&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;./android/validate/tests/index.html&#34;&gt;Test Specification Template&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Vidhance API reference</title>
      <link>http://support.vidhance.com/android/apireference/</link>
      <pubDate>Wed, 11 Mar 2015 14:32:03 +0100</pubDate>
      
      <guid>http://support.vidhance.com/android/apireference/</guid>
      <description>&lt;p&gt;This section will describe the available methods and types in the Vidhance API along with a few simple examples.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;./android/api/initializing/index.html&#34;&gt;Initializing Vidhance&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;./android/api/settings/index.html&#34;&gt;Creating and adjusting settings&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;./android/api/contexts/index.html&#34;&gt;Creating contexts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;./android/api/processing/index.html&#34;&gt;Processing frames&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Vidhance Mobile Test Specification</title>
      <link>http://support.vidhance.com/android/validate/tests/</link>
      <pubDate>Wed, 11 Mar 2015 14:32:03 +0100</pubDate>
      
      <guid>http://support.vidhance.com/android/validate/tests/</guid>
      <description>

&lt;hr /&gt;

&lt;h1 id=&#34;1-general:ac94ff63440ead02e029c796131baec5&#34;&gt;1 General&lt;/h1&gt;

&lt;h2 id=&#34;1-1-identification:ac94ff63440ead02e029c796131baec5&#34;&gt;1.1 Identification&lt;/h2&gt;

&lt;p&gt;This document acts as a template for the testing procedures that verifies Vidhance Mobile against the &lt;a href=&#34;./android/validate/requirements/index.html&#34;&gt;requirement specification&lt;/a&gt;. A complete specification is produced in collaboration with the customer.&lt;/p&gt;

&lt;h2 id=&#34;1-2-revision-history:ac94ff63440ead02e029c796131baec5&#34;&gt;1.2 Revision history&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;revision 1&lt;/em&gt; Emil Westergren 2015-05-26
&lt;br&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;2-test-specifications:ac94ff63440ead02e029c796131baec5&#34;&gt;2 Test Specifications&lt;/h1&gt;

&lt;h2 id=&#34;2-1-performance:ac94ff63440ead02e029c796131baec5&#34;&gt;2.1 Performance&lt;/h2&gt;

&lt;h3 id=&#34;2-1-1-endurance:ac94ff63440ead02e029c796131baec5&#34;&gt;2.1.1 Endurance&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Objectives&lt;/strong&gt; &lt;br&gt;
Verifies the capability of stabilizing video over longer periods of time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Requirements verified&lt;/strong&gt; &lt;br&gt;
&lt;strong&gt;prf01&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setup&lt;/strong&gt; &lt;br&gt;
Reboot the device.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Procedure&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Set the resolution to 1280 x 720 and frame rate to 120 fps.&lt;/li&gt;
&lt;li&gt;Start the recording.&lt;/li&gt;
&lt;li&gt;Wait for 30 minutes or until the maximum file size is reached.&lt;/li&gt;
&lt;li&gt;Verify that the video was successfully recorded.&lt;/li&gt;
&lt;li&gt;Set the resolution to 1920 x 1080 and frame rate to 60 fps.&lt;/li&gt;
&lt;li&gt;Repeat steps 2-4.&lt;/li&gt;
&lt;li&gt;Set the resolution to 4096 x 2160 and frame rate to 30 fps.&lt;/li&gt;
&lt;li&gt;Repeat steps 2-4.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;2-1-2-processing-speed:ac94ff63440ead02e029c796131baec5&#34;&gt;2.1.2 Processing speed&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Objectives&lt;/strong&gt; &lt;br&gt;
Verifies the capability of stabilizing video without frame drops.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Requirements verified&lt;/strong&gt; &lt;br&gt;
&lt;strong&gt;prf02&lt;/strong&gt; &lt;strong&gt;prf03&lt;/strong&gt; &lt;strong&gt;prf04&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setup&lt;/strong&gt; &lt;br&gt;
Reboot the device.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Procedure&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Set the resolution to 1280 x 720 and frame rate to 120 fps.&lt;/li&gt;
&lt;li&gt;Start the recording.&lt;/li&gt;
&lt;li&gt;Wait for 5 minutes.&lt;/li&gt;
&lt;li&gt;Verify that the number of frames dropped is less than specified.&lt;/li&gt;
&lt;li&gt;Set the resolution to 1920 x 1080 and frame rate to 60 fps.&lt;/li&gt;
&lt;li&gt;Repeat steps 2-4.&lt;/li&gt;
&lt;li&gt;Set the resolution to 4096 x 2160 and frame rate to 30 fps.&lt;/li&gt;
&lt;li&gt;Repeat steps 2-4.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-2-scenarios:ac94ff63440ead02e029c796131baec5&#34;&gt;2.2 Scenarios&lt;/h2&gt;

&lt;h3 id=&#34;2-2-1-walking-forward-in-lit-indoor-scene:ac94ff63440ead02e029c796131baec5&#34;&gt;2.2.1 Walking forward in lit indoor scene&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Objectives&lt;/strong&gt; &lt;br&gt;
Verifies the capability of stabilizing video in an indoor environment while walking.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Requirements verified&lt;/strong&gt; &lt;br&gt;
&lt;strong&gt;sce02&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setup&lt;/strong&gt; &lt;br&gt;
Reboot the device. Make sure the scene does not contain any moving objects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Procedure&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Stand up with the camera in a steady grip in the beginning of the corridor.&lt;/li&gt;
&lt;li&gt;Start the recording and slowly walk forward at a maximum speed of 1 m/s.&lt;/li&gt;
&lt;li&gt;Stop the recording after 10 m.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;2-2-2-sideways-recording-of-moving-person-in-sunlight:ac94ff63440ead02e029c796131baec5&#34;&gt;2.2.2 Sideways recording of moving person in sunlight&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Objectives&lt;/strong&gt; &lt;br&gt;
Verifies the capability of stabilizing video in an sunny outdoor environment while walking sideways and recording a moving object.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Requirements verified&lt;/strong&gt; &lt;br&gt;
&lt;strong&gt;sce03&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setup&lt;/strong&gt; &lt;br&gt;
Reboot the device.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Procedure&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Stand up with the camera in a steady grip in the beginning of the corridor.&lt;/li&gt;
&lt;li&gt;Start the recording and slowly walk forward at a maximum speed of 1 m/s.&lt;/li&gt;
&lt;li&gt;Stop the recording after 10 m.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;2-2-3-rotation-around-moving-object-in-cloudy-outdoor-scene:ac94ff63440ead02e029c796131baec5&#34;&gt;2.2.3 Rotation around moving object in cloudy outdoor scene&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Objectives&lt;/strong&gt; &lt;br&gt;
Verifies the capability of stabilizing video in an cloudy outdoor environment while rotating around a moving object.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Requirements verified&lt;/strong&gt; &lt;br&gt;
&lt;strong&gt;sce04&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setup&lt;/strong&gt; &lt;br&gt;
Reboot the device.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Procedure&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Stand up with the camera in a steady grip.&lt;/li&gt;
&lt;li&gt;Start the recording and slowly rotate around the object while keeping it centered and in focus.&lt;/li&gt;
&lt;li&gt;Stop the recording after two full rotations.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;2-2-4-rotation-around-user-in-indoor-scene:ac94ff63440ead02e029c796131baec5&#34;&gt;2.2.4 Rotation around user in indoor scene&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Objectives&lt;/strong&gt; &lt;br&gt;
Verifies the capability of stabilizing video in an indoor environment while rotating around the user.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Requirements verified&lt;/strong&gt; &lt;br&gt;
&lt;strong&gt;sce05&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setup&lt;/strong&gt; &lt;br&gt;
Reboot the device.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Procedure&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Stand up with the camera in a steady grip.&lt;/li&gt;
&lt;li&gt;Start the recording and slowly rotate around the user.&lt;/li&gt;
&lt;li&gt;Stop the recording after two full rotations.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;2-2-5-transitions-to-from-shade-in-sunny-outdoor-scene:ac94ff63440ead02e029c796131baec5&#34;&gt;2.2.5 Transitions to/from shade in sunny outdoor scene&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Objectives&lt;/strong&gt; &lt;br&gt;
Verifies the capability of stabilizing video in an sunny outdoor environment while transitioning from shade.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Requirements verified&lt;/strong&gt; &lt;br&gt;
&lt;strong&gt;sce06&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setup&lt;/strong&gt; &lt;br&gt;
Reboot the device. Make sure the scene does not contain any moving objects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Procedure&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Stand up with the camera in a steady grip standing in sunlight.&lt;/li&gt;
&lt;li&gt;Start the recording and slowly walk towards and enter a shaded area.&lt;/li&gt;
&lt;li&gt;Walk out from the shaded area.&lt;/li&gt;
&lt;li&gt;Stop the recording.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;2-2-6-zoomed-capture-of-distant-target-in-sunny-outdoor-scene:ac94ff63440ead02e029c796131baec5&#34;&gt;2.2.6 Zoomed capture of distant target in sunny outdoor scene&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Objectives&lt;/strong&gt; &lt;br&gt;
Verifies the capability of stabilizing video in an sunny outdoor environment while zoomed in on distant target.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Requirements verified&lt;/strong&gt; &lt;br&gt;
&lt;strong&gt;sce07&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setup&lt;/strong&gt; &lt;br&gt;
Reboot the device. Make sure the target can be captured without obstacles blocking the view.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Procedure&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Stand up with the camera in a steady grip standing in sunlight.&lt;/li&gt;
&lt;li&gt;Zoom in as much as possible on the target.&lt;/li&gt;
&lt;li&gt;Start the recording and try to keep the target centered in the preview.&lt;/li&gt;
&lt;li&gt;Stop the recording.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Vidhance SDK for Android</title>
      <link>http://support.vidhance.com/android/</link>
      <pubDate>Wed, 11 Mar 2015 14:32:03 +0100</pubDate>
      
      <guid>http://support.vidhance.com/android/</guid>
      <description>

&lt;h1 id=&#34;prerequisites:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Prerequisites&lt;/h1&gt;

&lt;h2 id=&#34;system-requirements:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;System Requirements&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Quad-core 2300 MHz processor&lt;/li&gt;
&lt;li&gt;2 GB RAM&lt;/li&gt;
&lt;li&gt;OpenGL ES 3.0&lt;/li&gt;
&lt;li&gt;EGLImage extension&lt;/li&gt;
&lt;li&gt;Android 4.4.4, Android 5.0 or higher&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;evaluate:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Evaluate&lt;/h1&gt;

&lt;h2 id=&#34;nexus-6:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Nexus 6&lt;/h2&gt;

&lt;p&gt;If you want to evaluate Vidhance we can provide you with an Android image with Vidhance included and instructions how to flash on Nexus 6. &lt;a href=&#34;./android/evaluate/index.html&#34;&gt;Click here for instructions&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;integration:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Integration&lt;/h1&gt;

&lt;p&gt;Vidhance SDK is based on a versatile C library with the possibility of integration at many different levels.&lt;/p&gt;

&lt;h2 id=&#34;wrap-driver:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Wrap Driver&lt;/h2&gt;

&lt;p&gt;We provide solutions to wrap the camera driver on your device and implement Vidhance as a modular middle layer between the operating system and the camera driver. This is a smooth solution when you do not want to modify the actual camera driver but want Vidhance integrated on a system level. &lt;a href=&#34;./android/gettingstarted/index.html&#34;&gt;Click here for instructions&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;into-driver:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Into Driver&lt;/h2&gt;

&lt;p&gt;If you are interested in using Vidhance at a driver level we provide support for integration in conjunction with low level optimizations.&lt;/p&gt;

&lt;h2 id=&#34;into-app:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Into App&lt;/h2&gt;

&lt;p&gt;We offer the possibility to enhance your application with Vidhance technology by using the Android Native Development Kit to gain the performance of a low level API at application level.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://support.vidhance.com/android/api/contexts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://support.vidhance.com/android/api/contexts/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;./android/apireference/index.html&#34;&gt;Back to API overview&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;creating-contexts:7bb109e106e94b989a42a80e60b6a8c5&#34;&gt;Creating contexts&lt;/h1&gt;

&lt;h2 id=&#34;overview:7bb109e106e94b989a42a80e60b6a8c5&#34;&gt;Overview&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;vidhance-context:7bb109e106e94b989a42a80e60b6a8c5&#34;&gt;vidhance_context&lt;/h3&gt;

&lt;p&gt;The context in which frames are processed.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;typedef struct _vidhance_context vidhance_context;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;vidhance-context-new:7bb109e106e94b989a42a80e60b6a8c5&#34;&gt;vidhance_context_new&lt;/h3&gt;

&lt;p&gt;Creates a new Vidhance context.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;vidhance_context* vidhance_context_new(vidhance_settings* settings);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;parameters:7bb109e106e94b989a42a80e60b6a8c5&#34;&gt;Parameters&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;settings&lt;/em&gt; A Vidhance settings object.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;vidhance-context-free:7bb109e106e94b989a42a80e60b6a8c5&#34;&gt;vidhance_context_free&lt;/h3&gt;

&lt;p&gt;Frees the Vidhance context.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void vidhance_context_free(vidhance_context*);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;parameters-1:7bb109e106e94b989a42a80e60b6a8c5&#34;&gt;Parameters&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;context&lt;/em&gt; A Vidhance context.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;example:7bb109e106e94b989a42a80e60b6a8c5&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;vidhance_settings* settings = vidhance_settings_new();
vidhance_context* context = vidhance_context_new(settings);
vidhance_context_free(context);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://support.vidhance.com/android/api/initializing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://support.vidhance.com/android/api/initializing/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;./android/apireference/index.html&#34;&gt;Back to API overview&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;initializing-vidhance:e66080406e08ea418c4514211206a926&#34;&gt;Initializing Vidhance&lt;/h1&gt;

&lt;h2 id=&#34;overview:e66080406e08ea418c4514211206a926&#34;&gt;Overview&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;vidhance-load:e66080406e08ea418c4514211206a926&#34;&gt;vidhance_load&lt;/h3&gt;

&lt;p&gt;Initializes the Vidhance library. Must be called before anything else can be used.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void vidhance_load();
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;kean-draw-gpu-android-graphicbuffer-configurealignedwidth:e66080406e08ea418c4514211206a926&#34;&gt;kean_draw_gpu_android_graphicBuffer_configureAlignedWidth&lt;/h3&gt;

&lt;p&gt;Provides Vidhance with a list of memory aligned widths in bytes for allocations of GraphicBuffers with format RGBA8888. This is not strictly necessary but greatly improves the performance.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void kean_draw_gpu_android_graphicBuffer_configureAlignedWidth(const int* alignedWidth, int count);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;parameters:e66080406e08ea418c4514211206a926&#34;&gt;Parameters&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;alignedWidth&lt;/em&gt; An array of integers with aligned width in bytes.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;count&lt;/em&gt; Number of aligned widths.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;kean-draw-gpu-android-graphicbuffer-registercallbacks:e66080406e08ea418c4514211206a926&#34;&gt;kean_draw_gpu_android_graphicBuffer_registerCallbacks&lt;/h3&gt;

&lt;p&gt;Registers a number of necessary callbacks for Vidhance to allocate graphics memory. The necessary callbacks are included in the SDK and should not be defined by the user.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void kean_draw_gpu_android_graphicBuffer_registerCallbacks(void (*allocate)(int, int, int, int, void**, void**, int*),
		void (*create)(int, int, int, int, int, void*, bool, void**, void**), void (*free)(void*), void (*lock)(void*, bool, void**),
		void (*unlock)(void*));
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;kean-base-debug-registercallback:e66080406e08ea418c4514211206a926&#34;&gt;kean_base_debug_registerCallback&lt;/h3&gt;

&lt;p&gt;Registers a callback for debug prints from inside the Vidhance library. A default callback is provided in the SDK where the output is directed to the Android logging system (logcat). The user is however free to use a custom callback.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void kean_base_debug_registerCallback(void (*print)(const char*));
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;parameters-1:e66080406e08ea418c4514211206a926&#34;&gt;Parameters&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;print&lt;/em&gt; A function pointer to a callback which handles the debug output.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;example:e66080406e08ea418c4514211206a926&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;/* Predefined aligned width in bytes for RGBA8888 GraphicBuffers on Nexus 6 */
#define ALIGNED_WIDTH_COUNT 10
const int alignedWidth[ALIGNED_WIDTH_COUNT] = { 128, 256, 384, 512, 1024, 1536, 2560, 3072, 3584, 4608 };

vidhance_load();
kean_draw_gpu_android_graphicBuffer_configureAlignedWidth(&amp;amp;alignedWidth[0], ALIGNED_WIDTH_COUNT);

kean_base_debug_registerCallback(debugPrint);
kean_draw_gpu_android_graphicBuffer_registerCallbacks(allocateGraphicBuffer, createGraphicBuffer, freeGraphicBuffer, lockGraphicBuffer,
		unlockGraphicBuffer);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://support.vidhance.com/android/api/processing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://support.vidhance.com/android/api/processing/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;./android/apireference/index.html&#34;&gt;Back to API overview&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;processing-frames:9633d27b7a2b1f04c4bfd4a47cc90697&#34;&gt;Processing frames&lt;/h1&gt;

&lt;h2 id=&#34;overview:9633d27b7a2b1f04c4bfd4a47cc90697&#34;&gt;Overview&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;vidhance-context-videostart:9633d27b7a2b1f04c4bfd4a47cc90697&#34;&gt;vidhance_context_videoStart&lt;/h3&gt;

&lt;p&gt;Prepares a Vidhance context for a new video stream. This function must be called before the first frame of the stream is sent to Vidhance.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void vidhance_context_videoStart(vidhance_context* context);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;parameters:9633d27b7a2b1f04c4bfd4a47cc90697&#34;&gt;Parameters&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;context&lt;/em&gt; A Vidhance context.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;vidhance-context-videostop:9633d27b7a2b1f04c4bfd4a47cc90697&#34;&gt;vidhance_context_videoStop&lt;/h3&gt;

&lt;p&gt;Ends a processing session for the Vidhance context. This function must be called after the last frame of the stream is sent to Vidhance.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void vidhance_context_videoStop(vidhance_context* context);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;parameters-1:9633d27b7a2b1f04c4bfd4a47cc90697&#34;&gt;Parameters&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;context&lt;/em&gt; A Vidhance context.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;vidhance-context-process:9633d27b7a2b1f04c4bfd4a47cc90697&#34;&gt;vidhance_context_process&lt;/h3&gt;

&lt;p&gt;Process a frame in the specified context using separate buffers as input and output.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void vidhance_context_process(vidhance_context* context, kean_draw_image* input, kean_draw_image* output);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;parameters-2:9633d27b7a2b1f04c4bfd4a47cc90697&#34;&gt;Parameters&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;context&lt;/em&gt; The context in which to process.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;input&lt;/em&gt; The input frame.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;output&lt;/em&gt; The output frame. This is where the resulting frame is written.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;vidhance-context-process-inplace:9633d27b7a2b1f04c4bfd4a47cc90697&#34;&gt;vidhance_context_process_inplace&lt;/h3&gt;

&lt;p&gt;Process a frame in the specified context using the same buffer as input and output.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void vidhance_context_process_inplace(vidhance_context* context, kean_draw_image* input);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;parameters-3:9633d27b7a2b1f04c4bfd4a47cc90697&#34;&gt;Parameters&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;context&lt;/em&gt; The context in which to process.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;input&lt;/em&gt; The input frame. The buffer is overwritten with the resulting frame.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;vidhance-context-processpreview:9633d27b7a2b1f04c4bfd4a47cc90697&#34;&gt;vidhance_context_processPreview&lt;/h3&gt;

&lt;p&gt;Process the preview buffer.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void vidhance_context_processPreview(vidhance_context* context, kean_draw_image* input, kean_draw_image* output);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;parameters-4:9633d27b7a2b1f04c4bfd4a47cc90697&#34;&gt;Parameters&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;context&lt;/em&gt; The context in which to process.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;input&lt;/em&gt; The input frame.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;output&lt;/em&gt; The output frame. This is where the resulting frame is written.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;kean-math-intsize2d:9633d27b7a2b1f04c4bfd4a47cc90697&#34;&gt;kean_math_intSize2D&lt;/h3&gt;

&lt;p&gt;Image resolution object used by Vidhance.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;typedef struct _kean_math_intSize2D kean_math_intSize2D;
kean_math_intSize2D kean_math_intSize2D_new(int width, int height);
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;kean-draw-image:9633d27b7a2b1f04c4bfd4a47cc90697&#34;&gt;kean_draw_image&lt;/h3&gt;

&lt;p&gt;The base image class used by Vidhance.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;typedef struct _kean_draw_image kean_draw_image;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;kean-draw-gpu-android-graphicbufferyuv420semiplanar:9633d27b7a2b1f04c4bfd4a47cc90697&#34;&gt;kean_draw_gpu_android_graphicBufferYuv420Semiplanar&lt;/h3&gt;

&lt;p&gt;The image class used to create images from YUV420SP buffers located in graphics memory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;typedef struct _kean_draw_gpu_android_graphicBufferYuv420Semiplanar kean_draw_gpu_android_graphicBufferYuv420Semiplanar;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;example:9633d27b7a2b1f04c4bfd4a47cc90697&#34;&gt;Example&lt;/h2&gt;

&lt;p&gt;Prepare the Vidhance context for a new video session.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;vidhance_context_videoStart(context);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Process frames by creating a &lt;em&gt;kean_draw_gpu_android_graphicBufferYuv420Semiplanar&lt;/em&gt; from the GraphicBuffer from the camera.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void VidhanceProcessor::processVideoCapture(sp&amp;lt;GraphicBuffer&amp;gt; input, sp&amp;lt;GraphicBuffer&amp;gt; output) {
	int horizontalStride = ALIGN(input-&amp;gt;width, 64);
	int verticalStride = ALIGN(input-&amp;gt;height, 32);
	int uvOffset = horizontalStride * verticalStride;

	kean_draw_gpu_android_graphicBufferYuv420Semiplanar* inputImage = kean_draw_gpu_android_graphicBufferYuv420Semiplanar_new((void*)input.get(),
			(void*)input-&amp;gt;getNativeBuffer(), (void*) input-&amp;gt;handle,
			kean_math_intSize2D_new(input-&amp;gt;width, input-&amp;gt;height), horizontalStride, input-&amp;gt;format, uvOffset);
	kean_draw_gpu_android_graphicBufferYuv420Semiplanar* outputImage = kean_draw_gpu_android_graphicBufferYuv420Semiplanar_new((void*)output.get(),
			(void*)output-&amp;gt;getNativeBuffer(), (void*) output-&amp;gt;handle,
			kean_math_intSize2D_new(output-&amp;gt;width, output-&amp;gt;height), horizontalStride, output-&amp;gt;format, uvOffset);
	vidhance_context_process(context, (kean_draw_image*) inputImage, (kean_draw_image*) outputImage);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Process preview frames.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void VidhanceProcessor::processPreview(sp&amp;lt;GraphicBuffer&amp;gt; input, sp&amp;lt;GraphicBuffer&amp;gt; output) {
	kean_draw_gpu_android_graphicBufferYuv420Semiplanar* inputImage = kean_draw_gpu_android_graphicBufferYuv420Semiplanar_new((void*)input.get(),
			(void*)input-&amp;gt;getNativeBuffer(), (void*) input-&amp;gt;handle,
			kean_math_intSize2D_new(input-&amp;gt;width, input-&amp;gt;height), input-&amp;gt;width, input-&amp;gt;format, 0);
	kean_draw_gpu_android_graphicBufferYuv420Semiplanar* outputImage = kean_draw_gpu_android_graphicBufferYuv420Semiplanar_new((void*)output.get(),
			(void*)output-&amp;gt;getNativeBuffer(), (void*) output-&amp;gt;handle,
			kean_math_intSize2D_new(output-&amp;gt;width, output-&amp;gt;height), output-&amp;gt;width, output-&amp;gt;format, 0);
	vidhance_context_processPreview(context, (kean_draw_image*) inputImage, (kean_draw_image*) outputImage);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;End the video session.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;vidhance_context_videoStop(context);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://support.vidhance.com/android/api/settings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://support.vidhance.com/android/api/settings/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;./android/apireference/index.html&#34;&gt;Back to API overview&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;creating-and-adjusting-settings:fa1a9aa7bf3e774ccda21a0a7b1222dd&#34;&gt;Creating and adjusting settings&lt;/h1&gt;

&lt;h2 id=&#34;overview:fa1a9aa7bf3e774ccda21a0a7b1222dd&#34;&gt;Overview&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;vidhance-settings:fa1a9aa7bf3e774ccda21a0a7b1222dd&#34;&gt;vidhance_settings&lt;/h3&gt;

&lt;p&gt;The base settings object.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;typedef struct _vidhance_settings vidhance_settings;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;vidhance-settings-new:fa1a9aa7bf3e774ccda21a0a7b1222dd&#34;&gt;vidhance_settings_new&lt;/h3&gt;

&lt;p&gt;Creates a new Vidhance settings object.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vidhance_settings* vidhance_settings_new();
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;vidhance-settings-registercallback:fa1a9aa7bf3e774ccda21a0a7b1222dd&#34;&gt;vidhance_settings_registerCallback&lt;/h3&gt;

&lt;p&gt;Registers optional callbacks. This function is optional.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void vidhance_settings_registerCallback(vidhance_settings*, int (*rotation)(float*, int));
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;parameters:fa1a9aa7bf3e774ccda21a0a7b1222dd&#34;&gt;Parameters&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;rotation&lt;/em&gt; A callback to sample the rotation of the device. Note that this is a very naive implementation and will change in the near future. Use the default callback provided in the SDK or simply NULL if the callback should not be used.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;vidhance-motion-settings:fa1a9aa7bf3e774ccda21a0a7b1222dd&#34;&gt;vidhance_motion_settings&lt;/h3&gt;

&lt;p&gt;The motion settings object.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;typedef struct _vidhance_motion_settings vidhance_motion_settings;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;vidhance-settings-getmotion:fa1a9aa7bf3e774ccda21a0a7b1222dd&#34;&gt;vidhance_settings_getMotion&lt;/h3&gt;

&lt;p&gt;Returns the motion settings object.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vidhance_motion_settings* vidhance_settings_getMotion(vidhance_settings* settings);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;parameters-1:fa1a9aa7bf3e774ccda21a0a7b1222dd&#34;&gt;Parameters&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;settings&lt;/em&gt; A base settings object.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;vidhance-motion-settings-setcomplexity:fa1a9aa7bf3e774ccda21a0a7b1222dd&#34;&gt;vidhance_motion_settings_setComplexity&lt;/h3&gt;

&lt;p&gt;Sets the complexity used for the motion module. A higher complexity improves the quality but increases the overhead.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void vidhance_motion_settings_setComplexity(vidhance_motion_settings* settings, int complexity);
int vidhance_motion_settings_getComplexity(vidhance_motion_settings* settings);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;parameters-2:fa1a9aa7bf3e774ccda21a0a7b1222dd&#34;&gt;Parameters&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;settings&lt;/em&gt; A motion settings object.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;complexity&lt;/em&gt; An integer clamped between 1 and 10 where a higher number results in better stabilization quality but more overhead.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;vidhance-motion-mode:fa1a9aa7bf3e774ccda21a0a7b1222dd&#34;&gt;vidhance_motion_mode&lt;/h3&gt;

&lt;p&gt;The available modes for the motion module.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;VIDHANCE_MOTION_MODE_OFF - The motion module will not be used.&lt;/li&gt;
&lt;li&gt;VIDHANCE_MOTION_MODE_TWO_DEGREES - Stabilization with X and Y translations.&lt;/li&gt;
&lt;li&gt;VIDHANCE_MOTION_MODE_FOUR_DEGREES - Stabilization with X, Y, Z translations and Z rotations.&lt;/li&gt;
&lt;li&gt;VIDHANCE_MOTION_MODE_SIX_DEGREES - Stabilization with X, Y, Z translations and X, Y, Z rotations.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;enum vidhance_motion_mode {
	VIDHANCE_MOTION_MODE_OFF, VIDHANCE_MOTION_MODE_TWO_DEGREES, VIDHANCE_MOTION_MODE_FOUR_DEGREES, VIDHANCE_MOTION_MODE_SIX_DEGREES
};
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;vidhance-motion-settings-setmode:fa1a9aa7bf3e774ccda21a0a7b1222dd&#34;&gt;vidhance_motion_settings_setMode&lt;/h3&gt;

&lt;p&gt;Sets the mode of the motion module.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void vidhance_motion_settings_setMode(vidhance_motion_settings* settings, vidhance_motion_mode mode);
vidhance_motion_mode vidhance_motion_settings_getMode(vidhance_motion_settings* settings);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;parameters-3:fa1a9aa7bf3e774ccda21a0a7b1222dd&#34;&gt;Parameters&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;settings&lt;/em&gt; A motion settings object.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;mode&lt;/em&gt; One of the available modes in the vidhance_motion_mode enum.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;vidhance-motion-stabilize-settings:fa1a9aa7bf3e774ccda21a0a7b1222dd&#34;&gt;vidhance_motion_stabilize_settings&lt;/h3&gt;

&lt;p&gt;The stabilization settings object.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;typedef struct _vidhance_motion_stabilize_settings vidhance_motion_stabilize_settings;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;vidhance-motion-settings-getstabilize:fa1a9aa7bf3e774ccda21a0a7b1222dd&#34;&gt;vidhance_motion_settings_getStabilize&lt;/h3&gt;

&lt;p&gt;Returns the stabilize settings object.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vidhance_motion_stabilize_settings* vidhance_motion_settings_getStabilize(vidhance_motion_settings* settings);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;parameters-4:fa1a9aa7bf3e774ccda21a0a7b1222dd&#34;&gt;Parameters&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;settings&lt;/em&gt; A motion settings object.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;vidhance-motion-stabilize-mode:fa1a9aa7bf3e774ccda21a0a7b1222dd&#34;&gt;vidhance_motion_stabilize_mode&lt;/h3&gt;

&lt;p&gt;The available modes for the stabilization module.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;VIDHANCE_MOTION_STABILIZE_MODE_OFF - Stabilization turned off.&lt;/li&gt;
&lt;li&gt;VIDHANCE_MOTION_STABILIZE_MODE_ON - Stabilization turned on.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;enum vidhance_motion_stabilize_mode {
	VIDHANCE_MOTION_STABILIZE_MODE_OFF, VIDHANCE_MOTION_STABILIZE_MODE_ON
};
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;vidhance-motion-stabilize-settings-setmode:fa1a9aa7bf3e774ccda21a0a7b1222dd&#34;&gt;vidhance_motion_stabilize_settings_setMode&lt;/h3&gt;

&lt;p&gt;Sets the stabilization mode.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void vidhance_motion_stabilize_settings_setMode(vidhance_motion_stabilize_settings* settings, vidhance_motion_stabilize_mode mode);
vidhance_motion_stabilize_mode vidhance_motion_stabilize_settings_getMode(vidhance_motion_stabilize_settings* settings);

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;parameters-5:fa1a9aa7bf3e774ccda21a0a7b1222dd&#34;&gt;Parameters&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;settings&lt;/em&gt; A stabilize settings object.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;mode&lt;/em&gt; One of the modes in vidhance_motion_stabilize_mode.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;vidhance-motion-stabilize-settings-setpreemptionlookahead:fa1a9aa7bf3e774ccda21a0a7b1222dd&#34;&gt;vidhance_motion_stabilize_settings_setPreemptionLookahead&lt;/h3&gt;

&lt;p&gt;Sets the number of frames to use in preemption lookahead.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void vidhance_motion_stabilize_settings_setPreemptionLookahead(vidhance_motion_stabilize_settings* settings, int preemptionLookahead);
int vidhance_motion_stabilize_settings_getPreemptionLookahead(vidhance_motion_stabilize_settings* settings);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;parameters-6:fa1a9aa7bf3e774ccda21a0a7b1222dd&#34;&gt;Parameters&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;settings&lt;/em&gt; A stabilize settings object.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;preemptionLookahead&lt;/em&gt; The number of frames to use in the lookahead buffer. A higher number will increase the smoothness of the stabilization but increase the latency in the recorded video. Valid range is 0-16.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;vidhance-motion-stabilize-settings-setshowtrace:fa1a9aa7bf3e774ccda21a0a7b1222dd&#34;&gt;vidhance_motion_stabilize_settings_setShowTrace&lt;/h3&gt;

&lt;p&gt;Enables the drawing of a trace to visualize the translations of the stabilization. Used for debugging and testing.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void vidhance_motion_stabilize_settings_setShowTrace(vidhance_motion_stabilize_settings* settings, bool showTrace);
bool vidhance_motion_stabilize_settings_getShowTrace(vidhance_motion_stabilize_settings* settings);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;parameters-7:fa1a9aa7bf3e774ccda21a0a7b1222dd&#34;&gt;Parameters&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;settings&lt;/em&gt; A stabilize settings object.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;showTrace&lt;/em&gt; A bool which enables or disables the trace.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;vidhance-motion-stabilize-settings-settargetscale:fa1a9aa7bf3e774ccda21a0a7b1222dd&#34;&gt;vidhance_motion_stabilize_settings_setTargetScale&lt;/h3&gt;

&lt;p&gt;Sets the relative amount of the frame to be cropped during stabilization. A lower value will increase the maximum motion amplitude which is able to be stabilized but increase the cropping of the original frame.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void vidhance_motion_stabilize_settings_setTargetScale(vidhance_motion_stabilize_settings* settings, float targetScale);
float vidhance_motion_stabilize_settings_getTargetScale(vidhance_motion_stabilize_settings* settings);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;parameters-8:fa1a9aa7bf3e774ccda21a0a7b1222dd&#34;&gt;Parameters&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;settings&lt;/em&gt; A stabilize settings object.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;targetScale&lt;/em&gt; The relative amount of cropping for the left, right, bottom and top side. Valid range 0.01 - 1.0.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;example:fa1a9aa7bf3e774ccda21a0a7b1222dd&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;vidhance_settings* settings = vidhance_settings_new();
vidhance_settings_registerCallback(settings, getRotationVector);
vidhance_motion_settings* motionSettings = vidhance_settings_getMotion(settings);
vidhance_motion_settings_setMode(motionSettings, VIDHANCE_MOTION_MODE_OFF);
vidhance_motion_stabilize_settings* stabilizeSettings = vidhance_motion_settings_getStabilize(motionSettings);
vidhance_motion_stabilize_settings_setShowTrace(stabilizeSettings, true);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>